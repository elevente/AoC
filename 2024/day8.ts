const input = `.AU..Z.....8.......................t..C.6.........
..................................................
.....K.U....................v.....................
...Z..A.............................v8.....t......
p..................a8...........b...t.............
..pU.....A..4.....................................
..........................E.......................
...........K..V..............v8.....Cb............
....V................b...p........................
....7.............................................
....4.....A..........V......K..E.....6............
.4.........................Vb...........0..C......
..................................k........N......
K....7...........9...........6.....kE.............
......7......1...................k.......C........
...p....................9....0.....N6.............
..........Z........e..1...........................
.............................E................N...
...4...............................v0..........z..
........U.....Z......1................z..a........
.....5.......7......................N.............
....................n.............................
.......................0.9...c..........z.d.T.....
...................n.W......a...t......D....d.....
..........I.....e......................o9.........
....5..2................e...........D.............
...........................n......D...............
......25I...1..................c......W.......o...
................n..............D..................
...........I........i..e..........................
......5......2.....P..............a...............
...........................z..................T...
..........j.....................Wd...........O..o.
................................................c.
.................I................B...............
...........u.............................T.d......
.............................................J....
.....3.i....u......................o..............
3...i.............................................
..................................................
...........j...............W....O............w....
...P........................J.....................
.....u............................................
.............................w....................
......u.................2...w...J.................
.....j.....B3......................O..............
P....B..............................c.............
................B.............w...................
.....i.............3..............................
..P.j....................J..........O.............`;
const input2 = `............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............`;

const map = input.split("\n").map(x => x.split(""));
const mapString = map.toString().replace(/,/g, "");
const mapArray = map.toString().replace(/,/g, "").split("");
const characters = [ ...new Set(map.toString().replace(/,|\./g, ""))];

const findPositions = (mapArray: string[], character: string, length: number) => {
    const arrayPositions = mapArray.map((e, i) => e === character ? i : "").filter(String);
    let positions = [];
    for (const p of arrayPositions) {
        positions.push([Math.floor(p / length), p % length]);
    }
    return positions;
};

const findAntinodesA = (position1: number[], position2: number[]): number[][] => {
    const difference = [position1[0] - position2[0], position1[1] - position2[1]];
    return [[position1[0] + difference[0], position1[1] + difference[1]], [position2[0] - difference[0], position2[1] - difference[1]]];
};

const findAntinodesB = (position1: number[], position2: number[], width: number, height: number): number[][] => {
    const difference = [position1[0] - position2[0], position1[1] - position2[1]];
    let positions: number[][] = [];
    positions.push(position1);
    positions.push(position2);
    for (let i = 1; i < Math.max(width, height); i++) {
        positions.push([position1[0] + (i * difference[0]), position1[1] + (i * difference[1])]);
        positions.push([position2[0] - (i * difference[0]), position2[1] - (i * difference[1])]);
    }
    return positions;
};

const uniquePoints = (points: number[][]): number[][] => {
    return Array.from(new Set(points.map(JSON.stringify))).map(JSON.parse);
};

const filterOutOfBoundsPoints = (points: number[][], width: number, height: number): number[][] => {
    return points.filter(point => (point[0] >= 0) && (point[0] < width) && (point[1] >= 0) && (point[1] < height));
};

let antinodesA: number[][] = [],
    antinodesB: number[][] = [];
for (const character of characters) {
    const positions = findPositions(mapArray, character, map.length);
    for (let i = 0; i < positions.length; i++) {
        for (let j = 0; j < positions.length; j++) {
            if (i !== j) {
                antinodesA = antinodesA.concat(findAntinodesA(positions[i], positions[j]));
                antinodesB = antinodesB.concat(findAntinodesB(positions[i], positions[j], map.length, map[0].length));
            }
        }
    }
}
antinodesA = uniquePoints(antinodesA);
antinodesA = filterOutOfBoundsPoints(antinodesA, map.length, map[0].length);
console.log(antinodesA.length);

antinodesB = uniquePoints(antinodesB);
antinodesB = filterOutOfBoundsPoints(antinodesB, map.length, map[0].length);
console.log(antinodesB.length);